import TelegramBot from "node-telegram-bot-api";
import moment from "moment";
import fs from "fs";

// –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ BotFather
const token = "7660404672:AAFJFVnTX0U5WRO5xRuRSD2bV3UUEbCxVXg";
const bot = new TelegramBot(token, { polling: true });
// –í–∞—à Telegram ID (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ userinfobot)
const myTelegramId = 1758910226;
// –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID)
let excludedUsers: Set<number> = new Set();
// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
let autoReplyMessage =
  "üì¢ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫! –°–µ–π—á–∞—Å –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π, –∏–ª–∏ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, üìÖ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!\n\n" +
  "–ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n" +
  "üì± **–¢–µ–ª–µ–≥—Ä–∞–º–º:** [@–ú–æ–π–¢–µ–ª–µ–≥—Ä–∞–º–º](https://t.me/–º–æ–π–¢–µ–ª–µ–≥—Ä–∞–º–º)\n" +
  "üí¨ **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:** [–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/–º–æ–π_–ø—Ä–æ—Ñ–∏–ª—å)\n" +
  "üìû **WhatsApp:** [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/–ú–æ–π–ù–æ–º–µ—Ä)\n\n" +
  "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É!";
let autoReplyEnabled = true; // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
let profanityFilterEnabled = true; // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–∞—Ç–∞
let profanityWarnings = new Map<number, { username: string; time: string; count: number; id: number }>();
let waitingForExceptionInput = false;
let waitingForNewMessage = false;
let currentAction: string | null = null;
let currentChatId: number | null = null;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞—Ç–µ—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
const profanityFilePath = "./data/profanityList.txt";
let profanityList: string[] = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
const loadProfanityList = (): void => {
  try {
    if (fs.existsSync(profanityFilePath)) {
      profanityList = fs.readFileSync(profanityFilePath, "utf-8").split("\n").map(line => line.trim());
      console.log("üìÇ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.");
    }
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤:", err);
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const isWorkingDay = (): boolean => {
  const now = moment();
  const dayOfWeek = now.day(); // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ç.–¥.
  const hourOfDay = now.hour();
  const minuteOfDay = now.minute();
  return (
    dayOfWeek >= 1 &&
    dayOfWeek <= 5 &&
    (hourOfDay > 8 || (hourOfDay === 8 && minuteOfDay >= 30)) &&
    hourOfDay < 17
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
const containsProfanity = (text: string): boolean => {
  return profanityList.some(word => text.toLowerCase().includes(word));
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
const sendAutoReply = async (msg: TelegramBot.Message): Promise<void> => {
  const senderId = msg.from?.id;
  const chatId = msg.chat.id;
  const messageText = msg.text || "";
  console.log(`‚öôÔ∏è Checking exclusions for sender ID: ${senderId}, chat ID: ${chatId}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞
if (profanityFilterEnabled && containsProfanity(messageText)) {
  console.log("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const username = msg.from?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const time = moment().format("YYYY-MM-DD HH:mm:ss");
  const userId = senderId!;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!profanityWarnings.has(userId)) {
    profanityWarnings.set(userId, { username, time, count: 1, id: userId });
  } else {
    const userWarning = profanityWarnings.get(userId);
    if (userWarning) {
      userWarning.count++;
      userWarning.time = time;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  const warningMessage = `‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!** –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É! üî¥\n\n
üí¨ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** "${messageText}"
  
üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
- üßë‚Äçüíº **–ù–∏–∫:** @${username}
- üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  
üìà **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** ${profanityWarnings.get(userId)?.count || 0}
  
‚ö†Ô∏è **–î–µ–π—Å—Ç–≤–∏—è:** –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram.`;

  bot.sendMessage(chatId, warningMessage);
  return;
}

  if (excludedUsers.has(senderId!)) {
    console.log(`üö´ Sender ${senderId} is excluded. No auto-reply sent.`);
    return;
  }

  if (!isWorkingDay() && autoReplyEnabled) {
    try {
      await bot.sendMessage(chatId, autoReplyMessage);
      console.log(`üì¢ Auto-reply sent to chat ID: ${chatId}`);
    } catch (error) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç —Å ID ${chatId}: ${error}`);
    }
  } else {
    console.log("üìÖ It's a working day or auto-reply is disabled. No auto-reply sent.");
  }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const mainMenuKeyboard = [
  [
    {
      text: `ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫`,
      callback_data: "toggle_auto_reply",
    },
    {
      text: `üîí –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞`,
      callback_data: "toggle_profanity_filter",
    },
  ],
  [
    {
      text: `‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ`,
      callback_data: "add_exception",
    },
    { text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "remove_exception" },
  ],
  [
    { text: "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è", callback_data: "view_exceptions" },
    {
      text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫",
      callback_data: "edit_auto_reply_message",
    },
    { text: "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data: "view_warnings" },
  ],
];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const sendMainMenu = (chatId: number): void => {
  bot
    .sendMessage(chatId, "üåê **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", {
      reply_markup: { inline_keyboard: mainMenuKeyboard },
    })
    .catch((error) => {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:", error);
    });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const displayWarnings = (chatId: number): void => {
  const warningsList =
    Array.from(profanityWarnings.values())
      .map(
        (warning) =>
          `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${warning.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}\n` +
          `üîë **ID:** ${warning.id}\n` +
          `üìÖ **–î–∞—Ç–∞:** ${warning.time}\n` +
          `‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** ${warning.count}\n` +
          `üìâ **–°—Ç–∞—Ç—É—Å:** ${warning.count >= 3 ? "‚ùóÔ∏è–ö—Ä–∏—Ç–∏—á–Ω–æ" : "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ"}\n` +
          `‚Äî`.repeat(40) // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
      )
      .join("\n") || "üìâ –ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π";

  bot.sendMessage(chatId, `üìã **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–∞—Ç–µ:**\n\n${warningsList}`, {
    parse_mode: "Markdown",
  });
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const saveExcludedUsers = (): void => {
  try {
    fs.writeFileSync(
      "excluded_users.json",
      JSON.stringify(Array.from(excludedUsers))
    );
    console.log("üìÇ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
  }
};

const loadExcludedUsers = (): void => {
  try {
    if (fs.existsSync("excluded_users.json")) {
      const data = fs.readFileSync("excluded_users.json", "utf-8");
      excludedUsers = new Set(
        JSON.parse(data).filter((id: any) => typeof id === "number")
      );
      console.log(
        "üìÇ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
        Array.from(excludedUsers)
      );
    }
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
  }
};

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const senderId = msg.from?.id;
  if (!senderId || msg.from?.is_bot) return;
  if (waitingForExceptionInput && currentChatId === chatId) {
    const userId = parseInt(msg.text ?? "", 10);
    if (isNaN(userId) || userId <= 0) {
      bot.sendMessage(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.");
      return;
    }
    if (currentAction === "add") {
      excludedUsers.add(userId);
      bot.sendMessage(
        chatId,
        `‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.**`
      );
      saveExcludedUsers();
    } else if (currentAction === "remove") {
      if (excludedUsers.has(userId)) {
        excludedUsers.delete(userId);
        bot.sendMessage(
          chatId,
          `‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.**`
        );
        saveExcludedUsers();
      } else {
        bot.sendMessage(
          chatId,
          `‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.**`
        );
      }
    }
    waitingForExceptionInput = false;
    currentAction = null;
    currentChatId = null;
    return;
  }
  if (waitingForNewMessage && currentChatId === chatId) {
    autoReplyMessage = msg.text || autoReplyMessage;
    bot.sendMessage(
      chatId,
      `‚úèÔ∏è **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:** "${autoReplyMessage}"`
    );
    waitingForNewMessage = false;
    currentChatId = null;
    return;
  }
  sendAutoReply(msg);
});

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏
bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message?.chat.id;
  const action = callbackQuery.data;
  if (!chatId || !action) return;
  switch (action) {
    case "toggle_auto_reply":
      autoReplyEnabled = !autoReplyEnabled;
      bot.sendMessage(
        chatId,
        `‚úÖ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ ${autoReplyEnabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}.**`
      );
      break;
    case "toggle_profanity_filter":
      profanityFilterEnabled = !profanityFilterEnabled;
      bot.sendMessage(
        chatId,
        `üîí **–§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ ${profanityFilterEnabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}.**`
      );
      break;
    case "add_exception":
      currentAction = "add";
      waitingForExceptionInput = true;
      currentChatId = chatId;
      bot.sendMessage(
        chatId,
        "üîë **–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:**"
      );
      break;
    case "remove_exception":
      currentAction = "remove";
      waitingForExceptionInput = true;
      currentChatId = chatId;
      bot.sendMessage(
        chatId,
        "üîë **–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:**"
      );
      break;
    case "view_exceptions":
      bot.sendMessage(
        chatId,
        `üìã **–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** ${
          Array.from(excludedUsers).join(", ") || "–ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        }`
      );
      break;
    case "edit_auto_reply_message":
      waitingForNewMessage = true;
      currentChatId = chatId;
      bot.sendMessage(chatId, "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:**");
      break;
    case "view_warnings":
      displayWarnings(chatId);
      break;
    default:
      bot.sendMessage(chatId, "‚ö†Ô∏è **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.**");
      break;
  }
  bot.answerCallbackQuery(callbackQuery.id);
});

// –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "üëã **–ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç—á–∏–∫. –ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏—Ö ID —á–µ—Ä–µ–∑ @userinfobot –∫–æ–º–∞–Ω–¥–æ–π /start.**"
  );
  sendMainMenu(chatId);
});

loadProfanityList();
loadExcludedUsers();
process.on("exit", saveExcludedUsers);

console.log("ü§ñ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.**");
